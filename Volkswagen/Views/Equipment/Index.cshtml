<!-- 设置本view的主要model IPagination是包含了分页功能的IEnumerable类 -->
@model IPagination<Volkswagen.Models.EquipmentModels>

@{
    <!-- 页面的窗口标题显示 -->
    ViewBag.Title = "设备履历";

    <!-- 设定页面模板 -->
    Layout = "~/Views/Shared/_Layout.cshtml";

    <!-- 设置目前的排序选项, 此为全局项, 后面会用到 -->
    string col, dir;

    <!-- ViewData["model"]里包含的是本页排序的选项, 将它存放在变量中 -->
    if (ViewData["model"] == null)
    {
        col = "";
        dir = "";
    }
    else
    {
        col = (ViewData["model"] as GridSortOptions).Column;
        dir = ((ViewData["model"] as GridSortOptions).Direction == MvcContrib.Sorting.SortDirection.Ascending) ? "Ascending" : "Descending";
    }
}

<!-- 标题 -->
<h3>设备履历</h3>


<script type="text/javascript">
    // 记录一共有多少个查询项
    var row = 0;

    // 查询时可用的列显示名
    var fieldMap = new Array(
        "设备编号",
        "设备名称",
        "负责人",
        "所在工段",
        "车间生产线",
        "点检",
        "点检编号",
        "日常保养",
        "日常保养编号",
        "巡检",
        "巡检编号",
        "需更新否",
        "最后修改时间",
        "修改人",
        "创建时间",
        "创建人",
        "备注"
    );

    // 查询时可用的操作符
    var opMap = new Array(
        "=",
        ">",
        "<",
        ">=",
        "<=",
        "<>",
        "包含"
        );

    // 查询时可用的列名
    var valueMap = new Array(
    "EquipmentID",
    "EquipDes",
    "Person",
    "Section",
    "WSArea",
    "ItemInspect",
    "ItemInspectNum",
    "RegularCare",
    "RegularCareNum",
    "Check",
    "CheckNum",
    "RoutingInspect",
    "ChangeTime",
    "Changer",
    "CreateTime",
    "Creator",
    "Remark");

    // 排序时可用的列显示名, 可为空
    var fieldSortMap = new Array(
        "",
        "设备编号",
        "设备名称",
        "负责人",
        "所在工段",
        "车间生产线",
        "点检",
        "点检编号",
        "日常保养",
        "日常保养编号",
        "巡检",
        "巡检编号",
        "需更新否",
        "最后修改时间",
        "修改人",
        "创建时间",
        "创建人"
    );

    // 排序时可用的列名
    var valueSortMap = new Array(
        "",
    "EquipmentID",
    "EquipDes",
    "Person",
    "Section",
    "WSArea",
    "ItemInspect",
    "ItemInspectNum",
    "RegularCare",
    "RegularCareNum",
    "Check",
    "CheckNum",
    "RoutingInspect",
    "ChangeTime",
    "Changer",
    "CreateTime",
    "Creator");

    // 增加一行查询
    function append_input() {

        // 得到查询的panel, 增加一行form-group容纳这一行查询
        var fm = document.getElementById("query_panel");
        var f = document.createElement("div");
        f.className = "form-group";

        // 创建三个输入, 列名和操作名为下拉, 操作数为输入框(之后可能会改)
        var field = document.createElement("select");
        var op = document.createElement("select");
        var operand = document.createElement("input");

        // 给三个输入赋id和name
        f.name = "fgroup" + row;
        field.name = "field" + row;
        op.name = "op" + row;
        operand.name = "operand" + row;

        field.id = "field" + row;
        op.id = "op" + row;
        operand.id = "operand" + row;

        // 给列名的select增加option项, 显示为fieldMap显示名, 值为valueMap, 用来传给服务器
        for (var i = 0; i < fieldMap.length; i++) {
            var option = document.createElement("option");
            option.text = fieldMap[i];
            option.value = valueMap[i];
            field.add(option);
        }

        // 给操作输入增加option项, 显示为opMap显示名, 值为数字序号, 用来传给服务器
        for (var i = 0; i < opMap.length; i++) {
            var ooption = document.createElement("option");
            ooption.text = opMap[i];
            ooption.value = i.toString();
            op.add(ooption);
        }

        // 当列名发生改变时, 依列名改变操作数的输入种类
        field.onchange = function () {
            // 得到现在的操作数输入, 即取此form-group的最后一个child
            var operand = this.parentElement.children.item(this.parentElement.children.length - 1);
            // 记下id和name
            var id_placement = operand.id;
            var name_placement = operand.name;
            // 删除这项输入
            this.parentElement.removeChild(operand);
            // 从之后文中的隐藏操作数输入中选择对应的进行克隆, 选择的element名字即为对应的列名
            var new_operand = document.getElementById(this.value).cloneNode(true);
            // 重新赋上id和name
            new_operand.id = id_placement;
            new_operand.name = name_placement;
            this.parentElement.appendChild(new_operand);
            new_operand.name = name_placement;
        }

        // 增加一个删除按钮, 清空本行查询项
        var cancel = document.createElement("button");
        cancel.id = "cancel" + row;
        cancel.type = "button";
        cancel.className = "btn btn-default btn-xs";
        // span即是x的符号, 是删除按钮的显示内容
        var cancelx = document.createElement("span");
        cancelx.className = "glyphicon glyphicon-remove"

        // 删除按钮被点击时, 将这行隐藏, 并将操作数的值设为空
        // 在服务器端, 如果某行的操作数值为空, 即认为这行查询不存在, 不作处理, 亦即删除了
        cancel.onclick = function () {
            this.parentElement.hidden = true;
            this.parentElement.lastChild.value = "";
        };
        cancel.appendChild(cancelx);

        // 将children都加入form-group中去
        f.appendChild(cancel);
        f.appendChild(field);
        f.appendChild(op);
        f.appendChild(operand);


        fm.appendChild(f);

        // 查询行计数加1
        row++;
    }

    // 当页面被加载时, 如果已有查询行存在, 需要在加载页面同时显示
    // 此函数在页面加载时在append_input基础上, 为查询行赋初始值
    // a : 列名
    // b : 操作符名
    // c : 操作数名
    // r : 第几行
    function add_input(a, b, c, r) {
        var field = document.getElementsByName("field" + r)[0];
        var op = document.getElementsByName("op" + r)[0];
        var operand = document.getElementById("operand" + r);
        var cancel = document.getElementById("cancel" + r)

        field.value = a;

        // 加载时onchange可能会被覆盖, 保险起见重新赋值一次
        field.onchange = function () {
            var operand = this.parentElement.children.item(this.parentElement.children.length - 1);
            var id_placement = operand.id;
            var name_placement = operand.name;
            this.parentElement.removeChild(operand);
            var new_operand = document.getElementById(this.value).cloneNode(true);
            new_operand.id = id_placement;
            new_operand.name = name_placement;
            this.parentElement.appendChild(new_operand);
            new_operand.name = name_placement;
        }

        op.value = b;

        // 同上, 可能会被覆盖, 重新赋值
        cancel.onclick = function () {
            this.parentElement.hidden = true;
            this.parentElement.lastChild.value = "";
        };

        // 此时field已经确定, 根据不同的field, 改变操作数的输入类型
        var id_placement = operand.id;
        var name_placement = operand.name;
        field.parentElement.removeChild(operand);
        var new_operand = document.getElementById(field.value).cloneNode(true);
        new_operand.id = id_placement;
        new_operand.name = name_placement;
        field.parentElement.appendChild(new_operand);
        new_operand.name = name_placement;

        new_operand.value = c;

        // 如果操作数的值为空, 说明是无效的查询行, 隐藏掉
        if (new_operand.value == "") {
            new_operand.parentElement.hidden = true;
        }
    }

    // 之后用的保存加载时已有查询行内容的数组
    var initial_value = new Array();

    // 全选功能, 将所有checkbox全部置为true
    function select_all() {
        var inputs = document.getElementById("query_form").getElementsByTagName("input");
        for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].type == "checkbox") {
                inputs[i].checked = true;
            }
        }
    }

    // 反选功能, 将所有checkbox的值toggle
    function toggle_all() {
        var inputs = document.getElementById("query_form").getElementsByTagName("input");
        for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].type == "checkbox") {
                inputs[i].checked = !inputs[i].checked;
            }
        }
    }

</script>

<!-- 预设的不同field的输入框, 有输入框/下拉/时间输入等, 当需要的时候, 会克隆一个副本放入form-group中 -->
<div hidden="hidden">
    @Html.TextBoxFor(model => (model as Volkswagen.Models.EquipmentModels).EquipmentID)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.EquipmentModels).EquipDes)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.EquipmentModels).Person)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.EquipmentModels).Section)
    @Html.DropDownList("WSArea", new SelectList(Enum.GetValues(typeof(Volkswagen.Models.EquipmentModels.WSNames))), String.Empty)
    @Html.DropDownList("ItemInspect", new SelectList(Enum.GetValues(typeof(Volkswagen.Models.EquipmentModels.ThereBe))), String.Empty)
    @Html.DropDownList("RegularCare", new SelectList(Enum.GetValues(typeof(Volkswagen.Models.EquipmentModels.ThereBe))), String.Empty)
    @Html.DropDownList("Check", new SelectList(Enum.GetValues(typeof(Volkswagen.Models.EquipmentModels.ThereBe))), String.Empty)
    @Html.DropDownList("RoutingInspect", new SelectList(Enum.GetValues(typeof(Volkswagen.Models.EquipmentModels.YesNo))), String.Empty)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.EquipmentModels).ItemInspectNum)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.EquipmentModels).RegularCareNum)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.EquipmentModels).CheckNum)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.EquipmentModels).Changer)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.EquipmentModels).ChangeTime, new { type = "datetime-local" })
    @Html.TextBoxFor(model => (model as Volkswagen.Models.EquipmentModels).Creator)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.EquipmentModels).CreateTime, new { type = "datetime-local" })
    @Html.TextBoxFor(model => (model as Volkswagen.Models.EquipmentModels).Remark)
</div>

<!-- 覆盖全页的表单 所有input默认为post提交方式 -->
<form action="/Equipment/" id="query_form" method="post">

    <!-- 查询模块 以panel显示 -->
    <div class="row">
        <div class="col-sm-6">
            <div class="panel panel-default">
                <!-- panel的标题 -->
                <div class="panel-heading">
                    <h3 class="panel-title">查询</h3>
                </div>
                <!-- panel的内容 -->
                <div id="query_panel" class="panel-body">
                    <!-- +号按钮, 单击后触发append_input, 新增一行查询 -->
                    <input type="button" value="+" onclick="append_input()" class="btn btn-sm" />
                    <!-- 确认提交表单查询, 因为重新查询后, 排序会被清空, 所以讲排序的输入Column置空, 表示不查询 -->
                    <input type="submit" id="query" value="确定" onclick="var sel=document.getElementById('Column'); sel.value='';" class="btn btn-sm" />
                    @{
                        // 加载时就存在查询行时, 先进行显示
                        int r = 0;
                        while (true)
                        {
                            string field = ViewData["field" + r] as string;
                            string op = ViewData["op" + r] as string;
                            string operand = ViewData["operand" + r] as string;

                            // 如果field为空, 说明已没有剩下的查询行, 结束工作
                            // 在程序中, 如果列名为空说明整个查询结束, 如果操作数名为空, 表示此行查询无效, 请注意
                            if (string.IsNullOrEmpty(field))
                            {
                                break;
                            }

                            <script>
                                // 将所有个值放入initial_value中保存起来, 待页面加载完再赋值
                                initial_value.push({ field_name: '@field', op_name: '@op', operand_name: '@operand', r_name: '@r' });
                                // 调用append_input加一行空的查询
                                append_input();
                            </script>
                            r++;
                        }
                    }
                    <script>
                        // 页面加载完后浏览器会自动调用这个函数
                        window.onload = function () {
                            // 调用add_input将之前保存下的查询值写入对应的输入内
                            for (var i = 0; i < initial_value.length; i++) {
                                add_input(initial_value[i].field_name, initial_value[i].op_name, initial_value[i].operand_name, initial_value[i].r_name);
                            }

                            // 设置排序选项的预设值
                            order_by.value = '@col';
                            order_as.value = '@dir';
                        }
                    </script>
                    <!-- </form> -->
                </div>
            </div>
        </div>
    </div>

    <br />

    <div class="row">
        <div class="col-sm-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h3 class="panel-title">批量操作</h3>
                </div>
                <div id="multi_panel" class="panel-body">
                    <div class="btn-group">
                        <input type="button" id="select_button" value="全选" onclick="select_all()" class="btn btn-default" />
                        <input type="button" id="select_button" value="反选" onclick="toggle_all()" class="btn btn-default" />
                    </div>
                    <input type="submit" class="btn btn-default" formaction="/Equipment/EditMultiple" value="批量修改">
                    <button class="btn btn-default" data-toggle="modal" data-target="#myModal">
                        批量删除
                    </button>
                    <!-- Modal -->
                    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                                    <h4 class="modal-title" id="myModalLabel">批量删除确认</h4>
                                </div>
                                <div class="modal-body">
                                    是否删除这些记录?
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-default" data-dismiss="modal">取消</button>
                                    <input type="submit" value="确定" formaction="/Equipment/DeleteMultiple" class="btn btn-primary" />
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>


    <br />

    <!-- 以下部分为某个记录的详细显示, 如果ViewData["selected"]有内容, 说明此页面有一条记录需要显示, 以下模块会出现 -->
    @if ((ViewData["selected"] != null) && (ViewData["selected"] != ""))
    {
        <div class="panel">
            <div class="panel-heading">
                <!-- 标题显示主键 -->
                <h3 class="panel-title">@ViewData["selected"]</h3>
            </div>
            <!-- 垂直列表, 显示列名和列值 -->
            <dl class="dl-horizontal">
                <dt>
                    <!-- 显示列名 -->
                    @Html.DisplayNameFor(model => model.Where(e => e.EquipmentID == ViewData["selected"]).First().EquipDes)
                </dt>

                <dd>
                    <!-- 显示列值 -->
                    @Html.DisplayFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().EquipDes)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.EquipmentID == ViewData["selected"]).First().Person)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().Person)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.EquipmentID == ViewData["selected"]).First().Section)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().Section)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.EquipmentID == ViewData["selected"]).First().WSArea)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().WSArea)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().ItemInspect)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().ItemInspect)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().RegularCare)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().RegularCare)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().Check)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().Check)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().RoutingInspect)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().RoutingInspect)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().ChangeTime)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().ChangeTime)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().Changer)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().Changer)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().CreateTime)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().CreateTime)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().Creator)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().Creator)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().Remark)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().Remark)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().Photo)
                </dt>

                <dd>
                    <!-- 以下用来显示图片 -->
                    @using System.Text.RegularExpressions;

                    <div class="row">
                        <div class="col-xs-6 col-md-3">
                            @{
        // 得到当前显示的记录的图片值($...$...$...)                        
        string init = Model.Where(e => e.EquipmentID == ViewData["selected"] as string).First().Photo;
        if (init == null)
        {
            // 为空则不显示
            <p>无</p>
        }
        else
        {
            <a class="thumbnail">
                <!-- 以$为分隔符进行分割 -->
                @{string[] sArray = Regex.Split(init, "[$]");//, RegexOptions.IgnoreCase);
                for (var i = 1; i < sArray.Length; i++)
                {
                    //为每一项构造图片地址并输出图片
                    <img src='/img/equipments/@sArray[i]'>
                }
                }
            </a>
        }
                            }
                        </div>
                    </div>
                </dd>


            </dl>
            @{ 
            // 接下来要得到当前记录项在列表中的序号, 这样才能得到前一项和后一项的地址
               // 得到model的枚举 
                var em = Model.GetEnumerator();
             // 得到第一条记录项
             var current_em = Model.Where(p => p.EquipmentID == ViewData["selected"] as string).First();
             // 赋初值
             var prev_em = em.Current;
             string first_one = "", last_one = "";
             try
             {
                 // 一条接一条往前走, 直到得到目前的记录项
                 em.MoveNext();
                 while ((em.Current != null) && (em.Current != current_em))
                 {
                     prev_em = em.Current;
                     em.MoveNext();
                 }
                 // 如果前一条为空, 说明一条记录都没有, 将前一条赋值为当前记录项
                 // 在判断时, 如果前一条等于当前项, 那就是没有前一条了
                 if (prev_em == null)
                 {
                     first_one = "disabled=\"disabled\"";
                     prev_em = em.Current;
                 }
                 // 如果读取下一条失败, 说明没有下一条了
                 if (!em.MoveNext())
                 {
                     last_one = "disabled=\"disabled\"";
                 }
             }
             catch (Exception) { }

            }

            <div class="btn-group">
                <!-- 前一项 在提交时要同时将selected_item赋值为前一条的主键, 说明要显示的值, 同时要给页码也一起提交, 保证返回时页码也不变 -->
                <button class='btn btn-default' @first_one onclick="var sel=document.getElementById('selected_item'); sel.value='@prev_em.EquipmentID'; var pg=document.getElementById('page'); pg.value='@Model.PageNumber';"><span class='glyphicon glyphicon-chevron-left'></span>上一项</button>
                @Html.ActionLink("详细", "Details", "Equipment", new { id = ViewData["selected"] as string }, new { @class = "btn btn-default" })
                @Html.ActionLink("编辑", "Edit", "Equipment", new { id = ViewData["selected"] as string }, new { @class = "btn btn-default" })
                @Html.ActionLink("删除", "Delete", "Equipment", new { id = ViewData["selected"] as string }, new { @class = "btn btn-default" })
                <!-- 后一项 -->
                <button class='btn btn-default' @last_one onclick="var sel=document.getElementById('selected_item'); sel.value='@em.Current.EquipmentID'; var pg=document.getElementById('page'); pg.value='@Model.PageNumber';"><span class='glyphicon glyphicon-chevron-right'></span>下一项</button>
            </div>

            <div class="btn-group">
                <!-- 通过get方式提交时, 如果给出查询项也是可以起作用的, 这里就是通过get方法调用其它页面, 同时查询EquipmentID的值 -->
                @Html.ActionLink("设备保养计划", "Index", "Inspection", new { field0 = "EquipmentID", op0 = "0", operand0 = current_em.EquipmentID }, new { @class = "btn btn-default" })
                @Html.ActionLink("备件库存", "Index", "Spare", new { field0 = "EquipmentID", op0 = "0", operand0 = current_em.EquipmentID }, new { @class = "btn btn-default" })
                @Html.ActionLink("备件领用记录", "Index", "SpareUser", new { field0 = "EquipmentID", op0 = "0", operand0 = current_em.EquipmentID }, new { @class = "btn btn-default" })
                @Html.ActionLink("备件订购信息", "Index", "SpareOrder", new { field0 = "EquipmentID", op0 = "0", operand0 = current_em.EquipmentID }, new { @class = "btn btn-default" })
                @Html.ActionLink("设备保修单", "Index", "Repair", new { field0 = "EquipmentID", op0 = "0", operand0 = current_em.EquipmentID }, new { @class = "btn btn-default" })
                @Html.ActionLink("设备维护", "Index", "Maintain", new { field0 = "EquipmentID", op0 = "0", operand0 = current_em.EquipmentID }, new { @class = "btn btn-default" })
                @Html.ActionLink("文件库", "Index", "File", new { field0 = "EquipmentID", op0 = "0", operand0 = current_em.EquipmentID }, new { @class = "btn btn-default" })
            </div>

        </div>
    }

    <p>
        @Html.ActionLink("新建", "Create", "Equipment", null, new { @class = "btn btn-default" })
        <input type="submit" class="btn btn-default" formaction="/Equipment/ExportExcel" value="导出">    </p>

    

    <!-- 记录要详细显示的记录项主键, 提交给服务器端处理 -->
    <input type="hidden" name="selected_item" id="selected_item" />

    <!-- 页码 要提交给服务器端 -->
    <input type="hidden" name="page" id="page" />

    <!-- 排序部分 -->
    <script>
        // 创建一个select, 作为列输入
        var order_by = document.createElement("select");
        order_by.name = "Column";
        order_by.id = "order_by";

        // 将fieldSortMap和valueSortMap的值生成option
        for (var i = 0; i < fieldSortMap.length; i++) {
            var option = document.createElement("option");
            option.text = fieldSortMap[i];
            option.value = valueSortMap[i];
            order_by.add(option);
        }
        var f = document.getElementById("query_form");
        f.appendChild(order_by);
    </script>

    <!-- 升序/降序的select -->
    <select id="order_as" name="Direction">
        <option value=""></option>
        <option value="Ascending">升序</option>
        <option value="Descending">降序</option>
    </select>
    <input type="submit" class="btn btn-default" value="排序">

    @using MvcContrib.UI.Grid
    @using MvcContrib.UI.Pager
    @using MvcContrib
    @using MvcContrib.Pagination

    <!-- 以下使用了mvccontrib库生成table -->
    @Html.Grid(Model).Columns(column => // 为主model里的每一项记录生成以下列
{
    // checkbox
    column.For(p => Html.CheckBox("Checked" + p.EquipmentID)).Sortable(false);
    // 查看按钮, 设置selected_item的值以告诉服务器要显示哪项, 同时也要给页码号, MvcHtmlString表示将之后的string当做html源代码输出到页面上
    column.For(p => new MvcHtmlString("<button class='btn btn-sm' onclick=\"var sel = document.getElementById('selected_item'); sel.value='" + @p.EquipmentID + "'; var pg = document.getElementById('page'); pg.value='" + @Model.PageNumber + "';\" ><span class='glyphicon glyphicon-eye-open'></span></button>"));
    // 编辑和删除, 直接调用controller
    column.For(p => new MvcHtmlString("<a href='/Equipment/Edit/" + p.EquipmentID + "' class='btn btn-sm'><span class='glyphicon glyphicon-pencil'></span></a>"));
    column.For(p => new MvcHtmlString("<a href='/Equipment/Delete/" + p.EquipmentID + "' class='btn btn-sm'><span class='glyphicon glyphicon-trash'></span></a>"));
    column.For(p => p.EquipmentID).Sortable(true);
    column.For(p => p.EquipDes).Sortable(true);
    column.For(p => p.Person).Sortable(true);
    column.For(p => p.Section).Sortable(true);
    column.For(p => p.WSArea).Sortable(true);
    column.For(p => p.Photo);
    column.For(p => p.ItemInspect).Sortable(true);
    column.For(p => p.ItemInspectNum).Sortable(true);
    column.For(p => p.RegularCare).Sortable(true);
    column.For(p => p.RegularCareNum).Sortable(true);
    column.For(p => p.Check).Sortable(true);
    column.For(p => p.CheckNum).Sortable(true);
    column.For(p => p.RoutingInspect).Sortable(true);
    column.For(p => p.ChangeTime).Sortable(true);
    column.For(p => p.Changer).Sortable(true);
    column.For(p => p.CreateTime).Sortable(true);
    column.For(p => p.Creator).Sortable(true);
    column.For(p => p.Remark).Sortable(true);
}).Empty("无数据").Attributes(@width => "100%", @style => "align:left;border-collapse:collapse;white-space:nowrap;overflow:hidden;text-overflow:ellipsis", @class => "table table-striped table-hover table-condensed");
    
    <!-- 页码部分 -->
    <nav>
        <ul class="pager">
            @if (Model.HasPreviousPage)
            {
                // 如果还有前一页 输出首页和前一页
                <li><button class='btn btn-default' onclick="var sel=document.getElementById('page'); sel.value='1';">首页</button></li>
                <li>
                    <button class='btn btn-default' onclick="var sel=document.getElementById('page'); sel.value='@(Model.PageNumber - 1)';"><span class='glyphicon glyphicon-chevron-left'></span>上一页</button>
                </li>
            }
            <li>共 @Model.TotalItems 项 | 当前 @Model.PageNumber 页 | 全 @Model.TotalPages 页</li>
            @if (Model.HasNextPage)
            {
                // 如果还有后一页 输出末页和后一页
                <li>
                    <button class='btn btn-default' onclick="var sel=document.getElementById('page'); sel.value='@(Model.PageNumber + 1)';"><span class='glyphicon glyphicon-chevron-right'></span>下一页</button>
                </li>
                <li><button class='btn btn-default' onclick="var sel=document.getElementById('page'); sel.value='@Model.TotalPages';">末页</button></li>
            }
        </ul>
    </nav>
</form>