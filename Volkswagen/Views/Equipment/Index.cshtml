@model IPagination<Volkswagen.Models.EquipmentModels>

@{
    ViewBag.Title = "设备履历";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string col, dir;
    if (ViewData["model"] == null)
    {
        col = "";
        dir = "";
    }
    else
    {
        col = (ViewData["model"] as GridSortOptions).Column;
        dir = ((ViewData["model"] as GridSortOptions).Direction == MvcContrib.Sorting.SortDirection.Ascending) ? "Asceding" : "Descending";
    }
}

<h3>设备履历</h3>

<script type="text/javascript">
    var row = 0;
    var fieldMap = new Array(
        "设备编号",
        "设备名称",
        "负责人",
        "所在工段",
        "车间生产线",
        "点检",
        "日常保养",
        "巡检",
        "需更新否",
        "最后修改时间",
        "修改人",
        "创建时间",
        "创建人",
        "备注"
    );

    var opMap = new Array(
        "=",
        ">",
        "<",
        ">=",
        "<=",
        "<>",
        "包含"
        );

    var valueMap = new Array(
    "EquipmentID",
    "EquipDes",
    "Person",
    "Section",
    "WSArea",
    "ItemInspect",
    "RegularCare",
    "Check",
    "RoutingInspect",
    "ChangeTime",
    "Changer",
    "CreateTime",
    "Creator",
    "Remark");

    function append_input() {

        var fm = document.getElementById("query_panel");
        var f = document.createElement("div");
        f.className = "form-group";


        var field = document.createElement("select");
        var op = document.createElement("select");
        var operand = document.createElement("input");

        f.name = "fgroup" + row;
        field.name = "field" + row;
        op.name = "op" + row;
        operand.name = "operand" + row;

        field.id = "field" + row;
        op.id = "op" + row;
        operand.id = "operand" + row;

        //operand.className = "form-control"

        for (var i = 0; i < fieldMap.length; i++) {
            var option = document.createElement("option");
            option.text = fieldMap[i];
            option.value = valueMap[i];
            field.add(option);
        }

        for (var i = 0; i < opMap.length; i++) {
            var ooption = document.createElement("option");
            ooption.text = opMap[i];
            ooption.value = i.toString();
            op.add(ooption);
        }

        field.onchange = function () {
            var operand = this.parentElement.children.item(this.parentElement.children.length - 1);
            var id_placement = operand.id;
            var name_placement = operand.name;
            this.parentElement.removeChild(operand);
            var new_operand = document.getElementById(this.value).cloneNode(true);
            new_operand.hidden = false;
            new_operand.id = id_placement;
            new_operand.name = name_placement;
            this.parentElement.appendChild(new_operand);
            new_operand.name = name_placement;
        }

        var cancel = document.createElement("button");
        cancel.type = "button";
        cancel.className = "btn btn-default btn-xs";
        var cancelx = document.createElement("span");
        cancelx.className = "glyphicon glyphicon-remove"
        cancel.onclick = function () {
            this.parentElement.hidden = true;
            this.parentElement.getElementsByTagName("input").value = null;
        };
        cancel.appendChild(cancelx);

        f.appendChild(cancel);
        f.appendChild(field);
        f.appendChild(op);
        f.appendChild(operand);
        

        fm.appendChild(f);

        row++;
    }

    function add_input(a, b, c, r) {
        var field = document.getElementsByName("field" + r)[0];
        var op = document.getElementsByName("op" + r)[0];
        var operand = document.getElementById("operand" + r);
        for (var i = 0; i < field.options.length; i++) {
            if (field.options[i].value == a) {
                field.options[i].selected = true;
                break;
            }
        }
        for (var i = 0; i < op.options.length; i++) {
            if (op.options[i].value == b) {
                op.options[i].selected = true;
                break;
            }
        }
        operand.value = c;
        if (operand.value == "") {
            operand.parentElement.hidden = true;
        }
    }

    function select_all() {
        var inputs = document.getElementById("query_form").getElementsByTagName("input");
        for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].type == "checkbox")
            {
                inputs[i].checked = true;
            }
        }
    }
    function toggle_all() {
        var inputs = document.getElementById("query_form").getElementsByTagName("input");
        for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].type == "checkbox") {
                inputs[i].checked = !inputs[i].checked;
            }
        }
    }

</script>

<div hidden="hidden">
    @Html.TextBoxFor(model => (model as Volkswagen.Models.EquipmentModels).EquipmentID)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.EquipmentModels).EquipDes)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.EquipmentModels).Person)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.EquipmentModels).Section)
    @Html.DropDownList("WSArea", new SelectList(Enum.GetValues(typeof(Volkswagen.Models.EquipmentModels.WSNames))), String.Empty)
    @Html.DropDownList("ItemInspect", new SelectList(Enum.GetValues(typeof(Volkswagen.Models.EquipmentModels.ThereBe))), String.Empty)
    @Html.DropDownList("RegularCare", new SelectList(Enum.GetValues(typeof(Volkswagen.Models.EquipmentModels.ThereBe))), String.Empty)
    @Html.DropDownList("Check", new SelectList(Enum.GetValues(typeof(Volkswagen.Models.EquipmentModels.ThereBe))), String.Empty)
    @Html.DropDownList("RoutingInspect", new SelectList(Enum.GetValues(typeof(Volkswagen.Models.EquipmentModels.YesNo))), String.Empty)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.EquipmentModels).Remark)
</div>

    <form action="/Equipment/" id="query_form" method="post">
        <div class="row">
            <div class="col-sm-6">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h3 class="panel-title">查询</h3>
                    </div>
                    <div id="query_panel" class="panel-body">
                        <input type="hidden" name="Colu" value=@col />
                        <input type="hidden" name="Direction" value=@dir />
                        <input type="button" value="+" onclick="append_input()" class="btn btn-sm" />
                        <input type="submit" id="query" value="确定" class="btn btn-sm" />
                        @{
                            int r = 0;
                            while (true)
                            {
                                string field = ViewData["field" + r] as string;
                                string op = ViewData["op" + r] as string;
                                string operand = ViewData["operand" + r] as string;
                                if (string.IsNullOrEmpty(field))
                                {
                                    break;
                                }

                                <script>
                                    append_input();
                                    add_input('@field', '@op', '@operand', '@r');
                                </script>
                                r++;
                            }
                        }
                        <!-- </form> -->
                    </div>
                </div>
            </div>
        </div>

        <br />

        <!-- <form action="/Equipment/" id="grid_form" method="post"> -->

        <p>
            @Html.ActionLink("新建", "Create", "Equipment", null, new { @class = "btn btn-default" })
            @Html.ActionLink("导出", "ExportExcel", "Equipment", null, new { @class = "btn btn-default" })
        </p>
        <!--
            @*

        <table class="table">
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.EquipDes)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Person)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Section)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.WSArea)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Photo)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ItemInspect)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.RegularCare)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Check)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.RoutingInspect)
                </th>

                <th>
                    @Html.DisplayNameFor(model => model.ChangeTime)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Changer)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CreateTime)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Creator)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Remark)
                </th>
                <th></th>
            </tr>

        @foreach (var item in Model) {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.EquipDes)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Person)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Section)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.WSArea)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Photo)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ItemInspect)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.RegularCare)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Check)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.RoutingInspect)
                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.ChangeTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Changer)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CreateTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Creator)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Remark)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id=item.EquipmentID }) |
                    @Html.ActionLink("Details", "Details", new { id=item.EquipmentID }) |
                    @Html.ActionLink("Delete", "Delete", new { id=item.EquipmentID })
                </td>
            </tr>
        }

        </table>
                *@
        -->
        <div class="btn-group">
            <input type="button" id="select_button" value="全选" onclick="select_all()" class="btn btn-default" />
            <input type="button" id="select_button" value="反选" onclick="toggle_all()" class="btn btn-default" />
        </div>
        @Html.ActionLink("批量修改", "EditMultiple", "Equipment", null, new { @class = "btn btn-default" })
        @Html.ActionLink("批量删除", "DeleteMultiple", "Equipment", null, new { @class = "btn btn-default" })

        @using MvcContrib.UI.Grid
        @using MvcContrib.UI.Pager
        @using MvcContrib
        @using MvcContrib.Pagination


        @Html.Grid(Model).Sort(ViewData["model"] as GridSortOptions).Columns(column =>
            {
                column.For(p => Html.CheckBox("Checked" + p.EquipmentID)).Sortable(false);
                column.For(p => p.EquipmentID).Sortable(true);
                column.For(p => p.EquipDes).Sortable(true);
                column.For(p => p.Person).Sortable(true);
                column.For(p => p.Section).Sortable(true);
                column.For(p => p.WSArea).Sortable(true);
                column.For(p => p.Photo.IsEmpty() ? "无" : "有").Named("设备图片").Sortable(true);
                column.For(p => p.ItemInspect).Sortable(true);
                column.For(p => p.RegularCare).Sortable(true);
                column.For(p => p.Check).Sortable(true);
                column.For(p => p.RoutingInspect).Sortable(true);
                column.For(p => p.ChangeTime).Sortable(true);
                column.For(p => p.Changer).Sortable(true);
                column.For(p => p.CreateTime).Sortable(true);
                column.For(p => p.Creator).Sortable(true);
                column.For(p => p.Remark).Sortable(true);
                column.For(p => Html.ActionLink("编辑", "Edit", new { id = p.EquipmentID }));
                column.For(p => Html.ActionLink("查看", "Details", new { id = p.EquipmentID }));
                column.For(p => Html.ActionLink("删除", "Delete", new { id = p.EquipmentID }));
            }).Empty("无数据").Attributes(@width => "100%", @style => "text-align:center;border-collapse:collapse;white-space:nowrap;overflow:hidden;text-overflow:ellipsis", @class => "table table-striped table-hover")
        <!--;table-layout:fixed-->
        @Html.Pager(Model).First(" 首页 ").Next(" 下一页 ").Previous(" 上一页 ").Last(" 末页 ").Format("共{2}项, 当前{0}-{1} |")
    </form>
