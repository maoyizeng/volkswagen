@model IPagination<Volkswagen.Models.RepairModels>

@{
    ViewBag.Title = "报修单";
    Layout = "~/Views/Shared/_Layout.cshtml";
    string col, dir;
    if (ViewData["model"] == null)
    {
        col = "";
        dir = "";
    }
    else
    {
        col = (ViewData["model"] as GridSortOptions).Column;
        dir = ((ViewData["model"] as GridSortOptions).Direction == MvcContrib.Sorting.SortDirection.Ascending) ? "Ascending" : "Descending";
    }
}

<h3>设备报修单</h3>

<script type="text/javascript">
    var row = 0;
    var fieldMap = new Array(
        "报修单号",
        "设备编号",
        "设备名称",
        "报修时刻",
        "修复时刻",
        "维修耗时",
        "班次",
        "车间生产线",
        "工段",
        "故障现象",
        "维修人",
        "故障原因和维修内容",
        "故障类别",
        "已修复否",
        "遗留问题",
        "验收人",
        "备注",
        "停机时间",
        "维修次数",
        "最后修改时间",
        "修改人",
        "创建时间",
        "创建人"
    );

    var opMap = new Array(
        "=",
        ">",
        "<",
        ">=",
        "<=",
        "<>",
        "包含"
        );

    var valueMap = new Array(
        "SheetID",
        "EquipmentID",
        "EquipDes",
        "StartTime",
        "FinishTime",
        "RepairTime",
        "Class",
        "Line",
        "Section",
        "FaultView",
        "Repairman",
        "Description",
        "FaultType",
        "Result",
        "Problem",
        "Checker",
        "Remark",
        "StopTime",
        "RepairNum",
        "ChangeTime",
        "Changer",
        "CreateTime",
        "Creator");

    var fieldSortMap = new Array(
        "",
        "报修单号",
        "设备编号",
        "设备名称",
        "报修时刻",
        "修复时刻",
        "维修耗时",
        "班次",
        "车间生产线",
        "工段",
        "故障现象",
        "维修人",
        "故障原因和维修内容",
        "故障类别",
        "已修复否",
        "遗留问题",
        "验收人",
        "停机时间",
        "维修次数",
        "最后修改时间",
        "修改人",
        "创建时间",
        "创建人"
    );

    var valueSortMap = new Array(
        "",
        "SheetID",
        "EquipmentID",
        "EquipDes",
        "StartTime",
        "FinishTime",
        "RepairTime",
        "Class",
        "Line",
        "Section",
        "FaultView",
        "Repairman",
        "Description",
        "FaultType",
        "Result",
        "Problem",
        "Checker",
        "StopTime",
        "RepairNum",
        "ChangeTime",
        "Changer",
        "CreateTime",
        "Creator");

    function append_input() {

        var fm = document.getElementById("query_panel");
        var f = document.createElement("div");
        f.className = "form-group";


        var field = document.createElement("select");
        var op = document.createElement("select");
        var operand = document.createElement("input");

        f.name = "fgroup" + row;
        field.name = "field" + row;
        op.name = "op" + row;
        operand.name = "operand" + row;

        field.id = "field" + row;
        op.id = "op" + row;
        operand.id = "operand" + row;

        //operand.className = "form-control"

        for (var i = 0; i < fieldMap.length; i++) {
            var option = document.createElement("option");
            option.text = fieldMap[i];
            option.value = valueMap[i];
            field.add(option);
        }

        for (var i = 0; i < opMap.length; i++) {
            var ooption = document.createElement("option");
            ooption.text = opMap[i];
            ooption.value = i.toString();
            op.add(ooption);
        }

        field.onchange = function () {
            var operand = this.parentElement.children.item(this.parentElement.children.length - 1);
            var id_placement = operand.id;
            var name_placement = operand.name;
            this.parentElement.removeChild(operand);
            var new_operand = document.getElementById(this.value).cloneNode(true);
            new_operand.id = id_placement;
            new_operand.name = name_placement;
            this.parentElement.appendChild(new_operand);
            new_operand.name = name_placement;
        }

        var cancel = document.createElement("button");
        cancel.id = "cancel" + row;
        cancel.type = "button";
        cancel.className = "btn btn-default btn-xs";
        var cancelx = document.createElement("span");
        cancelx.className = "glyphicon glyphicon-remove"
        cancel.onclick = function () {
            this.parentElement.hidden = true;
            this.parentElement.lastChild.value = "";
        };
        cancel.appendChild(cancelx);

        f.appendChild(cancel);
        f.appendChild(field);
        f.appendChild(op);
        f.appendChild(operand);


        fm.appendChild(f);

        row++;
    }

    function add_input(a, b, c, r) {
        var field = document.getElementsByName("field" + r)[0];
        var op = document.getElementsByName("op" + r)[0];
        var operand = document.getElementById("operand" + r);
        var cancel = document.getElementById("cancel" + r)

        field.value = a;

        field.onchange = function () {
            var operand = this.parentElement.children.item(this.parentElement.children.length - 1);
            var id_placement = operand.id;
            var name_placement = operand.name;
            this.parentElement.removeChild(operand);
            var new_operand = document.getElementById(this.value).cloneNode(true);
            new_operand.id = id_placement;
            new_operand.name = name_placement;
            this.parentElement.appendChild(new_operand);
            new_operand.name = name_placement;
        }

        op.value = b;

        cancel.onclick = function () {
            this.parentElement.hidden = true;
            this.parentElement.lastChild.value = "";
        };

        var id_placement = operand.id;
        var name_placement = operand.name;
        field.parentElement.removeChild(operand);
        var new_operand = document.getElementById(field.value).cloneNode(true);
        new_operand.id = id_placement;
        new_operand.name = name_placement;
        field.parentElement.appendChild(new_operand);
        new_operand.name = name_placement;

        new_operand.value = c;

        if (new_operand.value == "") {
            new_operand.parentElement.hidden = true;
        }
    }

    var initial_value = new Array();

    function select_all() {
        var inputs = document.getElementById("query_form").getElementsByTagName("input");
        for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].type == "checkbox") {
                inputs[i].checked = true;
            }
        }
    }
    function toggle_all() {
        var inputs = document.getElementById("query_form").getElementsByTagName("input");
        for (var i = 0; i < inputs.length; i++) {
            if (inputs[i].type == "checkbox") {
                inputs[i].checked = !inputs[i].checked;
            }
        }
    }
</script>

<div hidden="hidden">
    @Html.TextBoxFor(model => (model as Volkswagen.Models.RepairModels).SheetID)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.RepairModels).EquipmentID)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.RepairModels).EquipDes)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.RepairModels).RepairTime)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.RepairModels).FaultView)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.RepairModels).Repairman)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.RepairModels).Description)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.RepairModels).Problem)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.RepairModels).Checker)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.RepairModels).Remark)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.RepairModels).StopTime)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.RepairModels).RepairNum)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.RepairModels).StartTime, new { type = "datetime-local" })
    @Html.TextBoxFor(model => (model as Volkswagen.Models.RepairModels).FinishTime, new { type = "datetime-local" })
    @Html.DropDownList("Class", new SelectList(Enum.GetValues(typeof(Volkswagen.Models.RepairModels.ClassType))), String.Empty)
    @Html.DropDownList("Line", new SelectList(Enum.GetValues(typeof(Volkswagen.Models.EquipmentModels.WSNames))), String.Empty)
    <!--@Html.DropDownList("Section", new SelectList(Enum.GetValues(typeof(Volkswagen.Models.RepairModels.SectionNames))), String.Empty)-->
    @Html.TextBoxFor(model => (model as Volkswagen.Models.RepairModels).Section)
    @Html.DropDownList("FaultType", new SelectList(Enum.GetValues(typeof(Volkswagen.Models.RepairModels.FaultTypeEnum))), String.Empty)
    @Html.DropDownList("Result", new SelectList(Enum.GetValues(typeof(Volkswagen.Models.EquipmentModels.YesNo))), String.Empty)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.RepairModels).Changer)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.RepairModels).ChangeTime, new { type = "datetime-local" })
    @Html.TextBoxFor(model => (model as Volkswagen.Models.RepairModels).Creator)
    @Html.TextBoxFor(model => (model as Volkswagen.Models.RepairModels).CreateTime, new { type = "datetime-local" })
</div>


<form action="/Repair/" id="query_form" method="post">
    <div class="row">
        <div class="col-sm-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h3 class="panel-title">查询</h3>
                </div>
                <div id="query_panel" class="panel-body">
                    <input type="button" value="+" onclick="append_input()" class="btn btn-sm" />
                    <input type="submit" id="query" value="确定" onclick="var sel=document.getElementById('Column'); sel.value='';" class="btn btn-sm" />
                    @{
                        int r = 0;
                        while (true)
                        {
                            string field = ViewData["field" + r] as string;
                            string op = ViewData["op" + r] as string;
                            string operand = ViewData["operand" + r] as string;
                            if (string.IsNullOrEmpty(field))
                            {
                                break;
                            }

                            <script>
                                initial_value.push({ field_name: '@field', op_name: '@op', operand_name: '@operand', r_name: '@r' });
                                append_input();
                            </script>
                            r++;
                        }
                    }
                    <script>
                        window.onload = function () {
                            for (var i = 0; i < initial_value.length; i++) {
                                add_input(initial_value[i].field_name, initial_value[i].op_name, initial_value[i].operand_name, initial_value[i].r_name);
                            }

                            order_by.value = '@col';
                            order_as.value = '@dir';
                        }
                    </script>

                </div>
            </div>
        </div>
    </div>

    <br />

    <div class="row">
        <div class="col-sm-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h3 class="panel-title">批量操作</h3>
                </div>
                <div id="multi_panel" class="panel-body">
                    <div class="btn-group">
                        <input type="button" id="select_button" value="全选" onclick="select_all()" class="btn btn-default" />
                        <input type="button" id="select_button" value="反选" onclick="toggle_all()" class="btn btn-default" />
                    </div>
                    <input type="submit" class="btn btn-default" formaction="/Repair/EditMultiple" value="批量修改">
                    <button class="btn btn-default" data-toggle="modal" data-target="#myModal">
                        批量删除
                    </button>
                    <!-- Modal -->
                    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
                                    <h4 class="modal-title" id="myModalLabel">批量删除确认</h4>
                                </div>
                                <div class="modal-body">
                                    是否删除这些记录?
                                </div>
                                <div class="modal-footer">
                                    <button type="button" class="btn btn-default" data-dismiss="modal">取消</button>
                                    <input type="submit" value="确定" formaction="/Repair/DeleteMultiple" class="btn btn-primary" />
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

    <br />

    @if ((ViewData["selected"] != null) && (ViewData["selected"] != ""))
    {
        <div class="panel">
            <div class="panel-heading">
                <h3 class="panel-title">@ViewData["selected"]</h3>
            </div>
            <dl class="dl-horizontal">
                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().EquipmentID)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().EquipmentID)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().EquipDes)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().EquipDes)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().StartTime)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().StartTime)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().FinishTime)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().FinishTime)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().RepairTime)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().RepairTime)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Class)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Class)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Line)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Line)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Section)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Section)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().FaultView)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().FaultView)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Repairman)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Repairman)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Description)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Description)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().FaultType)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().FaultType)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Result)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Result)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Problem)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Problem)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Checker)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Checker)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Remark)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Remark)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().StopTime)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().StopTime)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().RepairNum)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().RepairNum)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().ChangeTime)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().ChangeTime)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Changer)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Changer)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().CreateTime)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().CreateTime)
                </dd>

                <dt>
                    @Html.DisplayNameFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Creator)
                </dt>

                <dd>
                    @Html.DisplayFor(model => model.Where(e => e.SheetID == ViewData["selected"] as string).First().Creator)
                </dd>

            </dl>

            @{ var em = Model.GetEnumerator();
               var current_em = Model.Where(p => p.SheetID == ViewData["selected"] as string).First();
               var prev_em = em.Current;
               string first_one = "", last_one = "";
               try
               {
                   em.MoveNext();
                   while ((em.Current != null) && (em.Current != current_em))
                   {
                       prev_em = em.Current;
                       em.MoveNext();
                   }
                   if (prev_em == null)
                   {
                       first_one = "disabled=\"disabled\"";
                       prev_em = em.Current;
                   }
                   if (!em.MoveNext())
                   {
                       last_one = "disabled=\"disabled\"";
                   }
               }
               catch (Exception) { }

            }

            <div class="btn-group">
                <button class='btn btn-default' @first_one onclick="var sel=document.getElementById('selected_item'); sel.value='@prev_em.SheetID'; var pg=document.getElementById('page'); pg.value='@Model.PageNumber';"><span class='glyphicon glyphicon-chevron-left'></span>上一项</button>
                @Html.ActionLink("详细", "Details", "Repair", new { id = ViewData["selected"] as string }, new { @class = "btn btn-default" })
                @Html.ActionLink("编辑", "Edit", "Repair", new { id = ViewData["selected"] as string }, new { @class = "btn btn-default" })
                @Html.ActionLink("删除", "Delete", "Repair", new { id = ViewData["selected"] as string }, new { @class = "btn btn-default" })
                <button class='btn btn-default' @last_one onclick="var sel=document.getElementById('selected_item'); sel.value='@em.Current.SheetID'; var pg=document.getElementById('page'); pg.value='@Model.PageNumber';"><span class='glyphicon glyphicon-chevron-right'></span>下一项</button>
            </div>
        </div>
    }

    <p>
        @Html.ActionLink("新建", "Create", "Repair", null, new { @class = "btn btn-default" })
        <input type="submit" class="btn btn-default" formaction="/Repair/ExportExcel" value="导出">
    </p>

    

    <input type="hidden" name="selected_item" id="selected_item" />
    <input type="hidden" name="page" id="page" />

    <script>
        var order_by = document.createElement("select");
        order_by.name = "Column";
        order_by.id = "order_by";

        for (var i = 0; i < fieldSortMap.length; i++) {
            var option = document.createElement("option");
            option.text = fieldSortMap[i];
            option.value = valueSortMap[i];
            order_by.add(option);
        }
        var f = document.getElementById("query_form");
        f.appendChild(order_by);
    </script>
    <select id="order_as" name="Direction">
        <option value=""></option>
        <option value="Ascending">升序</option>
        <option value="Descending">降序</option>
    </select>
    <input type="submit" class="btn btn-default" value="排序">

    @using MvcContrib.UI.Grid
    @using MvcContrib.UI.Pager
    @using MvcContrib.Pagination
    @using MvcContrib
    @Html.Grid(Model).Columns(column =>
{
    column.For(p => Html.CheckBox("Checked" + p.SheetID)).Sortable(false);
    column.For(p => new MvcHtmlString("<button class='btn btn-sm' onclick=\"var sel = document.getElementById('selected_item'); sel.value='" + @p.SheetID + "'; var pg = document.getElementById('page'); pg.value='" + @Model.PageNumber + "';\" ><span class='glyphicon glyphicon-eye-open'></span></button>"));
    column.For(p => new MvcHtmlString("<a href='/Repair/Edit/" + p.SheetID + "' class='btn btn-sm'><span class='glyphicon glyphicon-pencil'></span></a>"));
    column.For(p => new MvcHtmlString("<a href='/Repair/Delete/" + p.SheetID + "' class='btn btn-sm'><span class='glyphicon glyphicon-trash'></span></a>"));
    column.For(p => p.SheetID).Sortable(true);
    column.For(p => p.EquipmentID).Sortable(true);
    column.For(p => p.EquipDes).Sortable(true);
    column.For(p => p.StartTime).Sortable(true);
    column.For(p => p.FinishTime).Sortable(true);
    column.For(p => p.RepairTime).Sortable(true);
    column.For(p => p.Class).Sortable(true);
    column.For(p => p.Line).Sortable(true);
    column.For(p => p.Section).Sortable(true);
    column.For(p => p.FaultView).Sortable(true);
    column.For(p => p.Repairman).Sortable(true);
    column.For(p => p.Description).Sortable(true);
    column.For(p => p.FaultType).Sortable(true);
    column.For(p => p.Result).Sortable(true);
    column.For(p => p.Problem).Sortable(true);
    column.For(p => p.Checker).Sortable(true);
    column.For(p => p.Remark).Sortable(true);
    column.For(p => p.StopTime).Sortable(true);
    column.For(p => p.RepairNum).Sortable(true);
    column.For(p => p.ChangeTime).Sortable(true);
    column.For(p => p.Changer).Sortable(true);
    column.For(p => p.CreateTime).Sortable(true);
    column.For(p => p.Creator).Sortable(true);
}).Empty("无数据").Attributes(@width => "100%", @style => "align:left;border-collapse:collapse;white-space:nowrap;overflow:hidden;text-overflow:ellipsis", @class => "table table-striped table-hover table-condensed");

    <nav>
        <ul class="pager">
            @if (Model.HasPreviousPage)
            {
                <li><button class='btn btn-default' onclick="var sel=document.getElementById('page'); sel.value='1';">首页</button></li>
                <li>
                    <button class='btn btn-default' onclick="var sel=document.getElementById('page'); sel.value='@(Model.PageNumber - 1)';"><span class='glyphicon glyphicon-chevron-left'></span>上一页</button>
                </li>
            }
            <li>共 @Model.TotalItems 项 | 当前 @Model.PageNumber 页 | 全 @Model.TotalPages 页</li>
            @if (Model.HasNextPage)
            {
                <li>
                    <button class='btn btn-default' onclick="var sel=document.getElementById('page'); sel.value='@(Model.PageNumber + 1)';"><span class='glyphicon glyphicon-chevron-right'></span>下一页</button>
                </li>
                <li><button class='btn btn-default' onclick="var sel=document.getElementById('page'); sel.value='@Model.TotalPages';">末页</button></li>
            }
        </ul>
    </nav>
</form>